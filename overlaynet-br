#!/bin/bash

# Some info: https://vincent.bernat.im/en/blog/2017-vxlan-linux
source help
source common
source undo
source tools

SUDOCMD=sudo
BR_ASSOCIATED=br
PREFIX=vxo
JSON=True
MIN_VXLAN_RANGE=10
MAX_VXLAN_RANGE=1024

function ifacename_valid() {
    if [[ "$1" =~ ^${PREFIX}.* ]]; then
        return 0
    fi
    return 1
}

function _clean_ifacename() {
    local IFACE_NAME="$1"
    if [ "$IFACE_NAME" == "" ]; then
        return
    fi
    INTERFACE=${INTERFACE::-1}
    echo "${INTERFACE##$PREFIX}"
}

function get_vxlan_interfaces() {
    local INTERFACES="$(ip link show | grep "[0-9]\\{1,\}: $PREFIX[^:]\\+:" | awk '{print $2}')"
    local OUTPUT=
    while read INTERFACE; do
        OUTPUT="${OUTPUT}$(_clean_ifacename "$INTERFACE") "
    done <<< "$INTERFACES"
    echo -e "${OUTPUT}"
}

function generate_id() {
    local INTERFACES="$(get_vxlan_interfaces)"
    for ((i=MIN_VXLAN_RANGE;i<MAX_VXLAN_RANGE;i++)); do
        element_in_list "$i" "$INTERFACES" || break
    done
    if ((i<MAX_VXLAN_RANGE)); then
        echo "$i"
        return 0
    else
        echo "-1"
        return 1
    fi
}

function guess_physical_interface() {
    p_warning "trying to guess the physical interface to use (using the first non 'lo' device in the 'ip' utility)"
    local INTERFACES=$(ip link | grep '^[0-9]\{1,\}:' | grep -v ' lo:' | grep 'MULTICAST' | grep 'state UP' | awk '{print $2}' | head -n 1)
    if [ "$INTERFACES" == "" ]; then
        p_error "could not guess the physical interface"
        return 1
    fi
    echo "${INTERFACES::-1}"
    return 0
}

function json_to_vars() {
    local PREFIX="${1}_"
    local JSON="$2"
    local FIELDS="interface vxlan.vni driver.type driver.group driver.device driver.state driver.bridge"
    local F V
    for F in $FIELDS; do
        V="${F/\./_}"
        setonce "${PREFIX}${V}" "$(echo "$JSON" | jq -r ".[0].$F" 2> /dev/null)"
    done
}

function to_json() {
    local if_interface="$1"
    local if_vxlan="$2"
    local if_driver_group="$3"
    local if_driver_device="$4"
    local if_driver_state="$5"
    local if_driver_bridge="$6"

    fix_json_null if_interface
    fix_json_null if_vxlan
    fix_json_null if_driver_group
    fix_json_null if_driver_device
    fix_json_null if_driver_state
    fix_json_null if_driver_bridge

    { cat << EOF
{
    "interface": $if_interface,
    "vxlan": {
        "vni": $if_vxlan
    },
    "driver": {
        "type": "linuxbridges",
        "group": $if_driver_group,
        "device": $if_driver_device,
        "state": $if_driver_state,
        "bridge": $if_driver_bridge
    }
}
EOF
} 
}

function get_interface_info() {
    local L
    local IDX IFNAME IFID PREDICATE OP

    local TYPE=link
    local group dev id master="null" state
    
    while read L; do
        if [[ "$L" =~ ^[0-9]*: ]]; then
            IFS=':' read IDX IFNAME PREDICATE <<< "$L"
            IFNAME="${IFNAME/ /}"
            if ! ifacename_valid "$IFNAME"; then
                return
            fi
            get_vars_from_list master state -- $PREDICATE
            [ "$master" != "null" ] && master="\"$master\""
            tolower state
        else
            read OP PREDICATE <<< "$L"
            case "$OP" in
                vxlan) get_vars_from_list id group dev -- $PREDICATE;;
                bridge) TYPE=bridge;;
                bridge_slave) TYPE=bridge_slave;;
            esac
        fi
    done <<< "$1"

    # Set the output (we pipe to remove the pretty chars)
    { cat << EOF
{
    "interface": "$IFNAME",
    "vxlan": {
        "vni": "$id"
    },
    "driver": {
        "type": "linuxbridges",
        "group": "$group",
        "device": "$dev",
        "state": "$state",
        "bridge": $master
    }
}
EOF
} 
# | tr -d '\n\t '
}

function search_vni() {
    local VNI="$1"

    if ! isint "$VNI"; then
        p_error "'$VNI' is not a valid ID for any VXLAN"
        return 1
    fi

    local IPOUT="$(ip -d link show)"
    local L
    local IDX IFNAME PREDICATE OP
    local group dev id
    
    while read L; do
        if [[ "$L" =~ ^[0-9]*: ]]; then
            IFS=':' read IDX IFNAME PREDICATE <<< "$L"
            IFNAME="${IFNAME/ /}"
            if ! ifacename_valid "$IFNAME"; then
                IFNAME=""
            fi
        else
            if [ "$IFNAME" != "" ]; then
                read OP PREDICATE <<< "$L"
                case "$OP" in
                    vxlan) get_vars_from_list id group dev -- $PREDICATE
                        if [ "$id" == "$VNI" ]; then
                                break;
                        fi;;
                esac
            fi
        fi
    done <<< "$IPOUT"
    if [ "$IFNAME" != "" ]; then
        echo "$IFNAME"
        return 0
    else
        return 1
    fi
}

function get_interfaces() {
    local IFNAME="$1"

    if [ "$IFNAME" != "" ]; then
        if ! ifacename_valid "$IFNAME"; then
            p_error "$IFNAME is not a valid name for an interface"
            return 1
        fi
    fi

    local IF_OUT
    IF_OUT="$(ip -d link show $IFNAME 2> /dev/null)"
    if [ $? -ne 0 ]; then
        p_warning "could not get information about the interface/s $IFNAME"
        return 1
    fi
    local IF_BUFFER=
    local L=

    local OUTPUT IFINFO
    while read L; do
        if [[ "$L" =~ ^[0-9]+: ]]; then
            if [ "$IF_BUFFER" != "" ]; then
                IFINFO=$(get_interface_info "$IF_BUFFER")
                [ "$IFINFO" != "" ] && OUTPUT="$OUTPUT,$IFINFO"
            fi
            IF_BUFFER="$L"
        else
            IF_BUFFER="${IF_BUFFER}
${L}"
        fi
    done <<< "$IF_OUT"
    if [ "$IF_BUFFER" != "" ]; then
        IFINFO=$(get_interface_info "$IF_BUFFER")
        [ "$IFINFO" != "" ] && OUTPUT="$OUTPUT,$IFINFO"
    fi
    echo "[
${OUTPUT:1}
]" | tr -d ' \n\t'
}

function create() {
    local VXLAN_ID=
    local PHYS_IFACE=
    local IGMP_GROUP=239.1.1.1
    _HELP__reset_help
    _HELP__append_description "Creates one interface"
    _HELP__add_help_cmd "[ ID ]" "identifier of the VLAN to create (blank to obtain a random ID)"
    _HELP__add_help_cmd "--group|-g" "IGMP group to create the VXLAN (defaults to 239.1.1.1)"
    _HELP__add_help_cmd "--device|-d" "physical device to use in the IGMP group (defaults to eth0)"
    _HELP__add_help_cmd "--help|-h" "shows this help and exists"
    
    while (( $# > 0 )); do
        case "$1" in
        --help | -h) _HELP__usage create "$DESC" && exit 0;;
        --device | -d) PHYS_IFACE="$2"
            shift;;
            *)  if [ "$VXLAN_ID" == "" ]; then 
                    VXLAN_ID="$1"
                else
                    _HELP__usage create && exit 1
                fi;;
        esac
        shift
    done

    if [ "$PHYS_IFACE" == "" ]; then
        output_to_var_or_fail "PHYS_IFACE" "Could not guess the physical interface" guess_physical_interface || exit 1
        p_debug "using physical interface $PHYS_IFACE"
    fi

    if [ "$VXLAN_ID" == "" ]; then
        output_to_var_or_fail "VXLAN_ID" "Could not generate a new ID " generate_id || exit 1
        p_debug "using VXLAN ID $VXLAN_ID"
    fi

    local OUTPUT
    exec_or_fail "could not create the device ${PREFIX}${VXLAN_ID}" \
        $SUDOCMD ip link add ${PREFIX}${VXLAN_ID} type vxlan id ${VXLAN_ID} group ${IGMP_GROUP} dstport 0 dev ${PHYS_IFACE} \
        || return 1

    _UNDO__add_undo_cmdline $SUDOCMD ip link delete ${PREFIX}${VXLAN_ID}

    exec_or_fail "could not create the bridge ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID}" \
        $SUDOCMD ip link add ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID} type bridge \
        || return 2

    _UNDO__add_undo_cmdline $SUDOCMD ip link delete ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID}

    exec_or_fail "could not enslave the vlxan interface to the bridge" \
        $SUDOCMD ip link set ${PREFIX}${VXLAN_ID} master ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID} \
        || return 3

    _UNDO__add_undo_cmdline $SUDOCMD ip link set ${PREFIX}${VXLAN_ID} nomaster

    exec_or_fail "could not get interface ${PREFIX}${VXLAN_ID} up" \
        $SUDOCMD ip link set ${PREFIX}${VXLAN_ID} up \
        || return 4

    _UNDO__add_undo_cmdline $SUDOCMD ip link set ${PREFIX}${VXLAN_ID} down

    exec_or_fail "could not get interface ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID} up" \
        $SUDOCMD ip link set ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID} up \
        || return 5

    _UNDO__add_undo_cmdline $SUDOCMD ip link set ${BR_ASSOCIATED}${PREFIX}${VXLAN_ID} down

    to_json "${PREFIX}${VXLAN_ID}" "${VXLAN_ID}" "${IGMP_GROUP}" "${PHYS_IFACE}" "null" "${BR_ASSOCIATED}${PREFIX}${VXLAN_ID}"
    # echo "${BR_ASSOCIATED}${PREFIX}${VXLAN_ID}"
    return 0
}

function check() {
    local IFACE_NAME=
    _HELP__reset_help
    _HELP__append_description "Checks if one interface is properly built"
    _HELP__add_help_cmd "<interface name>" "name of the interface to get the information (blank to get all the interfaces)"
    _HELP__add_help_cmd "--help|-h" "shows this help and exists"
    
    while (( $# > 0 )); do
        case "$1" in
        --help | -h) _HELP__usage info "$DESC" && exit 0;;
            *)  if [ "$IFACE_NAME" == "" ]; then 
                    IFACE_NAME="$1"
                else
                    _HELP__usage info && exit 1
                fi;;
        esac
        shift
    done

    if ! ifacename_valid "$IFACE_NAME"; then
        p_error "$if1_name is not a valid name for an interface"
        return 1
    fi

    local IFINFO
    IFINFO=$(get_interfaces "${IFACE_NAME:? "the interface name is not provided" "$(_HELP__usage check)"}")
    (($?!=0)) && exit 2
    json_to_vars if1 "$IFINFO"

    if [ "$if1_driver_type" != "linuxbridges" ]; then
        p_error "type '$if1_driver_type' for the interface is not supported"
        return 3
    fi

    if [ "$if1_driver_bridge" == "null" ]; then
        p_error "the device has not any bridge"
        return 4
    fi

    if ! isint "$if1_vxlan_vni"; then
        p_error "the VNI is not valid"
        return 5
    fi

    local state
    get_vars_from_list state -- $(ip link show $if1_driver_bridge | head -n 1)
    tolower state
    if [ "$state" != "up" ]; then
        p_error "the associated bridge $if1_driver_bridge is not up"
        return 6
    fi

    p_debug "device is correct"
    return 0
}

function delete() {
    local IFACE_NAME=
    _HELP__reset_help
    _HELP__append_description "Deletes one interface along with its bridge"
    _HELP__add_help_cmd "<interface name>" "name of the interface to get the information (blank to get all the interfaces)"
    _HELP__add_help_cmd "--help|-h" "shows this help and exists"
    
    while (( $# > 0 )); do
        case "$1" in
        --help | -h) _HELP__usage info "$DESC" && exit 0;;
            *)  if [ "$IFACE_NAME" == "" ]; then 
                    IFACE_NAME="$1"
                else
                    _HELP__usage info && exit 1
                fi;;
        esac
        shift
    done

    check "$IFACE_NAME"

    # Here we have the information of the interfaces in if1_ vars
    if [ $? -eq 0 ]; then
        p_debug "deleting interface $IFACE_NAME"
        $SUDOCMD ip link set $if1_driver_bridge down
        $SUDOCMD ip link set $if1_interface down
        $SUDOCMD ip link set $if1_interface nomaster
        $SUDOCMD ip link delete $if1_driver_bridge
        $SUDOCMD ip link delete $if1_interface
    else
        p_error "the device if not correct... please correct it or delete it by hand"
    fi

    return 0
}

function get() {
    local IFACE_NAME=
    local ISVNI=False
    _HELP__reset_help
    _HELP__append_description "Gets the information about one interface"
    _HELP__add_help_cmd "[ <bridge name> | <vni> ]" "name of the bridge or identifier of the VXLAN to get the information (blank to get all the interfaces)"
    _HELP__add_help_cmd "--vni|-v" "the parameter is a Virtual Network Indentifier"
    _HELP__add_help_cmd "--help|-h" "shows this help and exists"
    
    while (( $# > 0 )); do
        case "$1" in
        --help | -h) _HELP__usage info "$DESC" && exit 0;;
        --vni | -v) ISVNI=True;;
            *)  if [ "$IFACE_NAME" == "" ]; then 
                    IFACE_NAME="$1"
                else
                    _HELP__usage info && exit 1
                fi;;
        esac
        shift
    done

    if [ "$ISVNI" == "True" ]; then
        IFACE_NAME=$(search_vni "$IFACE_NAME")
        if [ $? -ne 0 ]; then
            p_error "could not find any device for that VNI"
            return 1
        fi
    fi
    get_interfaces "$IFACE_NAME"
    return $?
}

n=0
while (( $# > 0 )); do
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" ]; then
        for f in $(echo "${1:1}" | sed 's/\(.\)/-\1 /g' ); do
            ARR[$n]="$f"
            n=$(($n+1))
        done
    else
        ARR[$n]="$1"
        n=$(($n+1))
    fi
    shift
done

UNDO=True
VERBOSE=False
QUIET=False
_HELP__set_description "OverlayNET-BR - Helper to create Overlay Networks (Linux Bridges edition)"
DESC="This is a tool that helps to create overlay networks using linux bridges"
_HELP__add_help_cmd "--no-undo|-N" "does not try to undo the commands"
_HELP__add_help_cmd "--help|-h" "shows this help and exits"
_HELP__add_help_cmd "--verbose|-V" "display debug messages"
_HELP__add_help_cmd "--quiet|-q" "supresses most of messages"
_HELP__add_help_cmd "--prefix|-p" "the prefix of the interfaces for OverlayNET-BR"
_HELP__add_help_cmd "get" "get the information of one or all the interfaces in the system (recognised by OverlayNET-BR; defaults '$PREFIX')"

# Parse the commandline
n=0
COMMAND=
while [ $n -lt ${#ARR[@]} -a "$COMMAND" == "" ]; do
    PARAM="${ARR[$n]}"
    case "$PARAM" in
        get|create|check|delete) COMMAND="$PARAM";;
        --verbose | -V) VERBOSE=True;;
        --no-undo | -N) UNDO=False;;
        --quiet | -q) QUIET=True;;
        --prefix | -p) 
            n=$(($n+1))
            PREFIX="${ARR[$n]}"
            ;;
        --help | -h) _HELP__usage "" "$DESC" && exit 0;;
        *) _HELP__usage "" "$DESC" && exit 1;;
    esac
    n=$(($n+1))
done

# Finally execute the proper command
RETVAL=0
if [ "$COMMAND" != "" ]; then
    $COMMAND "${ARR[@]:$n}"
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        if [ "$UNDO" == "True" ]; then
            _UNDO__execute
        fi
    fi
else
    echo "no command issued" && _HELP__usage "" && exit 1
fi
exit $RETVAL